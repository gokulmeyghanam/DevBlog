name: CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: eu-north-1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install SBOM tools
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          sudo apt-get update && sudo apt-get install -y jq

      - name: Generate SBOM
        run: |
          mkdir -p ./sbom-output/sbom-frontend
          syft dir:. -o cyclonedx-json | jq . > ./sbom-output/sbom-frontend/sbom-frontend-sbom.json

      - name: Scan SBOM for vulnerabilities
        run: |
          grype sbom:./sbom-output/sbom-frontend/sbom-frontend-sbom.json --fail-on high --output json | jq . > ./sbom-output/sbom-frontend/sbom-frontend-grype-report.json
          GRYPE_TOTAL=$(jq '.matches | length' ./sbom-output/sbom-frontend/sbom-frontend-grype-report.json)
          echo "GRYPE_SUMMARY=Total: ${GRYPE_TOTAL}" >> $GITHUB_ENV

      - name: Login to DockerHub
        run: echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin
        env:
          DOCKERHUB_USERNAME: gokulmeyghanam
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: docker build -t gokulmeyghanam/test:latest .

      - name: Push to DockerHub
        run: docker push gokulmeyghanam/test:latest

      # - name: SonarQube scan
      #   uses: sonarsource/sonarqube-scan-action@v2.0.0
      #   with:
      #     projectBaseDir: .
      #     args: >
      #       -Dsonar.projectKey=test-frontend
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: http://52.23.169.9:9000

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: 13.62.105.16
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            if ! command -v docker &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            fi
            if ! command -v aws &> /dev/null; then
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
            fi
            sudo docker pull gokulmeyghanam/test:latest
            sudo docker stop test || true
            sudo docker rm test || true
            sudo docker run -d --name test -p 80:80 gokulmeyghanam/test:latest

      - name: Upload SBOM and Grype reports
        uses: actions/upload-artifact@v4
        with:
          name: sbom-reports
          path: ./sbom-output/sbom-frontend/

      - name: Run Trivy vulnerability scanner
        id: trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'gokulmeyghanam/test:latest'
          format: 'json'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Parse Trivy results
        run: |
          TOTAL=$(jq '.Results[].Vulnerabilities | length' trivy-results.json | awk '{s+=$1} END {print s}')
          echo "SUMMARY=Total: ${TOTAL} (HIGH/CRITICAL only)" >> $GITHUB_ENV
        shell: bash
        continue-on-error: true

      - name: Save start time
        run: echo "START_TIME=$(date +%s)" >> $GITHUB_ENV

  notify:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: always()
    steps:
      - name: Calculate build duration
        run: |
          END_TIME=$(date +%s)
          START_TIME=${{ needs.build-and-deploy.outputs.START_TIME }}
          DURATION=$((END_TIME - START_TIME))
          echo "DURATION=${DURATION}s" >> $GITHUB_ENV

      - name: Notify Teams
        run: |
          curl -H 'Content-Type: application/json' \
            -d "{
              \"text\": \"🔔 **Build Notification**\\n\\n**📌 Build Status:** ${{ job.status }}\\n**📅 Build Date:** $(date +%Y-%m-%d)\\n**⏰ Build Time:** $(date +%H:%M:%S)\\n**⏳ Build Duration:** ${DURATION}\\n\\n**🔧 Workflow:** ${{ github.workflow }}\\n**🌿 Branch:** ${{ github.ref_name }}\\n**🔑 Commit:** ${{ github.sha }}\\n**👤 Actor:** ${{ github.actor }}\\n**📦 Repository:** ${{ github.repository }}\\n**📝 Commit Message:** ${{ github.event.head_commit.message }}\\n**✍️ Commit Author:** ${{ github.event.head_commit.author.name }}\\n\\n**📊 Trivy Vulnerabilities Summary:**\\n${SUMMARY}\\n\\n**📊 SBOM/Grype Vulnerabilities Summary:**\\n${GRYPE_SUMMARY}\\n\\n✅ Build completed successfully.\\n**🔗 [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})**\"
            }" \
            "https://inocyx.webhook.office.com/webhookb2/b2f24366-6c59-4de0-9fc5-6963c73f1b5c@a63df4ca-e300-4210-9614-46f210e37dd6/IncomingWebhook/f65b150d9ec84769ba5f62af44604084/4d3a18ad-26bc-4a66-ad4b-f2275594f39e/V2ppctjoI9S4YQqiNw-XzZs_czSmC_QikjBRKbt1TLjK01"
